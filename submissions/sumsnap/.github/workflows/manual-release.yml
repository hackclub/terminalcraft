name: Manual Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog

      - name: Download binaries from latest pre-release
        run: |
          PRE_RELEASE_TAG=$(gh release list --limit 10 --exclude-drafts --exclude-pre-releases=false | awk '$3 == "Pre-release" {print $1; exit}')
          echo "Latest pre-release tag: $PRE_RELEASE_TAG"
          if [ -z "$PRE_RELEASE_TAG" ]; then
            echo "No pre-release found!"
            exit 1
          fi
          gh release download "$PRE_RELEASE_TAG" --dir dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Release Version
        id: version
        run: |
          echo "RELEASE_VERSION=release-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Get commit messages since last release
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s")
          else
            CHANGELOG=$(git log "$LAST_TAG"..HEAD --pretty=format:"- %s")
          fi

          # Write multiline changelog to GITHUB_OUTPUT using <<EOF syntax
          {
            echo "body<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Find binaries
        id: find_binaries
        run: |
          echo "BINARIES=$(find dist -type f \( -name 'sumsnap-*' -o -name '*.exe' \) | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: "Release ${{ env.RELEASE_VERSION }}"
          prerelease: false
          body: ${{ steps.changelog.outputs.body }}
          files: ${{ env.BINARIES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
