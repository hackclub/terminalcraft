#!/usr/bin/env python3

import os
import queue
import sounddevice as sd
import vosk
import sys
import subprocess
import json

# Hide Vosk logging
os.environ["VOSK_LOG_LEVEL"] = "-1"

# ==== THEME SELECTOR ====

def select_theme():
    print("\nüé® Choose a Terminal Theme:")
    print("1. Dark")
    print("2. Light")
    print("3. Hacker (Matrix-style green)")

    choice = input("Enter your choice (1/2/3): ").strip()
    theme_scripts = {
        "1": "themes/dark.sh",
        "2": "themes/light.sh",
        "3": "themes/hacker.sh"
    }

    if choice in theme_scripts:
        subprocess.run(["bash", theme_scripts[choice]])
    else:
        print("‚ùå Invalid choice.")

# ==== MATRIX MODE ====

def enter_matrix_mode():
    subprocess.run(["bash", "scripts/matrix.sh"])

# ==== SPEECH RECOGNITION ====

def get_speech(model):
    q = queue.Queue()

    def callback(indata, frames, time, status):
        if status:
            print(status, file=sys.stderr)
        q.put(bytes(indata))

    with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype='int16',
                           channels=1, callback=callback):
        print("üé§ Speak now (press Ctrl+C to stop)...")
        rec = vosk.KaldiRecognizer(model, 16000)

        while True:
            data = q.get()
            if rec.AcceptWaveform(data):
                result = json.loads(rec.Result())
                return result.get("text", "")

# ==== MAN PAGE QUERY ====

def query_man_db(query):
    try:
        result = subprocess.run(["man", "-k", query], capture_output=True, text=True)
        lines = result.stdout.strip().split('\n')

        if not lines or lines[0].strip() == "":
            return "‚ùå No matching commands found in man pages."

        suggestions = ["‚úÖ Suggestions:"]
        for line in lines[:10]:  # Limit to top 10
            parts = line.split(" - ", 1)
            if len(parts) == 2:
                cmd_info = parts[0].strip()
                description = parts[1].strip()
                suggestions.append(f"- {cmd_info}: {description}")
            else:
                suggestions.append(f"- {line.strip()}")
        return "\n".join(suggestions)

    except Exception as e:
        return f"\n‚ö†Ô∏è Error querying man: {e}"

# ==== MAIN PROGRAM ====

def run_main():
    MODEL_PATH = "model"
    if not os.path.exists(MODEL_PATH):
        print(f"‚ùó Model not found at: {MODEL_PATH}")
        sys.exit(1)

    model = vosk.Model(MODEL_PATH)
    try:
        text = get_speech(model)
        print(f"\nüìù You said: {text}")
        print(query_man_db(text))
    except KeyboardInterrupt:
        print("\nüëã Exiting.")

# ==== ENTRY POINT ====

if __name__ == "__main__":
    if len(sys.argv) > 1:
        cmd = sys.argv[1].lower()
        if cmd == "theme":
            select_theme()
        elif cmd == "matrix":
            enter_matrix_mode()
        else:
            print(f"‚ö†Ô∏è Unknown option: {cmd}")
            print("Usage: terminal-talks [theme | matrix]")
    else:
        run_main()
