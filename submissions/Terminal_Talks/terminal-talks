#!/usr/bin/env python3

import os
os.environ["VOSK_LOG_LEVEL"] = "-1"  # Vosk logs

import queue
import sounddevice as sd
import vosk
import sys
import subprocess
import json

# Model path
MODEL_PATH = "model"
if not os.path.exists(MODEL_PATH):
    print(f"‚ùó Model not found at {MODEL_PATH}")
    sys.exit(1)

model = vosk.Model(MODEL_PATH)
q = queue.Queue()

def callback(indata, frames, time, status):
    if status:
        print(status, file=sys.stderr)
    q.put(bytes(indata))

def get_speech():
    with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype='int16',
                           channels=1, callback=callback):
        print("üé§ Speak now (press Ctrl+C to stop)...")
        rec = vosk.KaldiRecognizer(model, 16000)

        while True:
            data = q.get()
            if rec.AcceptWaveform(data):
                result = json.loads(rec.Result())
                return result.get("text", "")

def query_man_db(query):
    try:
        result = subprocess.run(["man", "-k", query], capture_output=True, text=True)
        lines = result.stdout.strip().split('\n')

        if not lines or lines[0].strip() == "":
            return "‚ùå No matching commands found in man pages."

        # Collect suggestions
        suggestions = ["‚úÖ Suggestions:"]
        for line in lines[:10]:  # Top 10 only
            parts = line.split(" - ", 1)
            if len(parts) == 2:
                cmd_info = parts[0].strip()
                description = parts[1].strip()
                suggestions.append(f"- {cmd_info}: {description}")
            else:
                suggestions.append(f"- {line.strip()}")
        return "\n".join(suggestions)

    except Exception as e:
        return f"\n‚ö†Ô∏è Error querying man: {e}"

# --- MAIN ---
if __name__ == "__main__":
    try:
        text = get_speech()
        print(f"\nüìù You said: {text}")
        print(query_man_db(text))
    except KeyboardInterrupt:
        print("\nüëã Exiting.")
