package BIN

import 	"strings"



func Normal2BIN(input string) string {

	data := map[rune]string{
		'A':  "1000001",
		'B':  "1000010",
		'C':  "1000011",
		'D':  "1000100",
		'E':  "1000101",
		'F':  "1000110",
		'G':  "1000111",
		'H':  "1001000",
		'I':  "1001001",
		'J':  "1001010",
		'K':  "1001011",
		'L':  "1001100",
		'M':  "1001101",
		'N':  "1001110",
		'O':  "1001111",
		'P':  "1010000",
		'Q':  "1010001",
		'R':  "1010010",
		'S':  "1010011",
		'T':  "1010100",
		'U':  "1010101",
		'V':  "1010110",
		'W':  "1010111",
		'X':  "1011000",
		'Y':  "1011001",
		'Z':  "1011010",
		'a':  "1100001",
		'b':  "1100010",
		'c':  "1100011",
		'd':  "1100100",
		'e':  "1100101",
		'f':  "1100110",
		'g':  "1100111",
		'h':  "1101000",
		'i':  "1101001",
		'j':  "1101010",
		'k':  "1101011",
		'l':  "1101100",
		'm':  "1101101",
		'n':  "1101110",
		'o':  "1101111",
		'p':  "1110000",
		'q':  "1110001",
		'r':  "1110010",
		's':  "1110011",
		't':  "1110100",
		'u':  "1110101",
		'v':  "1110110",
		'w':  "1110111",
		'x':  "1111000",
		'y':  "1111001",
		'z':  "1111010",
		'0':  "0110000",
		'1':  "0110001",
		'2':  "0110010",
		'3':  "0110011",
		'4':  "0110100",
		'5':  "0110101",
		'6':  "0110110",
		'7':  "0110111",
		'8':  "0111000",
		'9':  "0111001",
		'!':  "0100001",
		'"':  "0100010",
		'#':  "0100011",
		'$':  "0100100",
		'%':  "0100101",
		'&':  "0100110",
		'(':  "0101000",
		')':  "0101001",
		'*':  "0101010",
		',':  "0101100",
		'-':  "0101101",
		'.':  "0101110",
		'/':  "0101111",
		':':  "0111010",
		';':  "0111011",
		'<':  "0111100",
		'=':  "0111101",
		'>':  "0111110",
		'?':  "0111111",
		'@':  "1000000",
		'[':  "1011011",
		'\'': "0100111",
		']':  "1011101",
		'^':  "1011110",
		'_':  "1011111",
		'`':  "1100000",
		'{':  "1111011",
		'|':  "1111100",
		'}':  "1111101",
		'~':  "1111110",
		' ':  "0100000",
		'\\': "1011100"}

if input == "" {
		return "Input is empty"
	}else {
	var char rune
	var output []string

	for i := 0; i < len(input); i++ {
		char = rune(input[i])
		output = append(output, data[char])

	}


	return strings.Join(output, " ")
	}
}


func BIN2Normal(input string) string {

	
	Data := map[string]rune{
		"1000001": 'A',
		"1000010": 'B',
		"1000011": 'C',
		"1000100": 'D',
		"1000101": 'E',
		"1000110": 'F',
		"1000111": 'G',
		"1001000": 'H',
		"1001001": 'I',
		"1001010": 'J',
		"1001011": 'K',
		"1001100": 'L',
		"1001101": 'M',
		"1001110": 'N',
		"1001111": 'O',
		"1010000": 'P',
		"1010001": 'Q',
		"1010010": 'R',
		"1010011": 'S',
		"1010100": 'T',
		"1010101": 'U',
		"1010110": 'V',
		"1010111": 'W',
		"1011000": 'X',
		"1011001": 'Y',
		"1011010": 'Z',
		"1100001": 'a',
		"1100010": 'b',
		"1100011": 'c',
		"1100100": 'd',
		"1100101": 'e',
		"1100110": 'f',
		"1100111": 'g',
		"1101000": 'h',
		"1101001": 'i',
		"1101010": 'j',
		"1101011": 'k',
		"1101100": 'l',
		"1101101": 'm',
		"1101110": 'n',
		"1101111": 'o',
		"1110000": 'p',
		"1110001": 'q',
		"1110010": 'r',
		"1110011": 's',
		"1110100": 't',
		"1110101": 'u',
		"1110110": 'v',
		"1110111": 'w',
		"1111000": 'x',
		"1111001": 'y',
		"1111010": 'z',
		"0110000": '0',
		"0110001": '1',
		"0110010": '2',
		"0110011": '3',
		"0110100": '4',
		"0110101": '5',
		"0110110": '6',
		"0110111": '7',
		"0111000": '8',
		"0111001": '9',
		"0100001": '!',
		"0100010": '"',
		"0100011": '#',
		"0100100": '$',
		"0100101": '%',
		"0100110": '&',
		"0101000": '(',
		"0101001": ')',
		"0101010": '*',
		"0101100": ',',
		"0101101": '-',
		"0101110": '.',
		"0101111": '/',
		"0111010": ':',
		"0111011": ';',
		"0111100": '<',
		"0111101": '=',
		"0111110": '>',
		"0111111": '?',
		"1000000": '@',
		"1011011": '[',
		"0100111": '\'',
		"1011101": ']',
		"1011110": '^',
		"1011111": '_',
		"1100000": '`',
		"1111011": '{',
		"1111100": '|',
		"1111101": '}',
		"1111110": '~',
		"0100000": ' ',
		"1011100": '\\',
	}


	var char rune
	var output []string
	chars := input
	if input == "" {
		return "Input is empty"
	}else if input != "1000001" && input != "1000010" && input != "1000011" && input != "1000100" && input != "1000101" && input != "1000110" && input != "1000111" && input != "1001000" && input != "1001001" && input != "1001010" && input != "1001011" && input != "1001100" && input != "1001101" && input != "1001110" && input != "1001111" && input != "1010000" && input != "1010001" && input != "1010010" && input != "1010011" && input != "1010100" && input != "1010101" && input != "1010110" && input != "1010111" && input != "1011000" && input != "1011001" && input != "1011010" &&
		input != "1100001" && input != "1100010" && input != "1100011" && input != "1100100" && input != "1100101" && input != "1100110" && input != "1100111" && input != "1101000" && input != "1101001" && input != "1101010" && input != "1101011" && input != "1101100" && input != "1101101" && input != "1101110" && input != "1101111" && input != "1110000" && input != "1110001" && input != "1110010" && input != "1110011" && input != "1110100" && input != "1110101" && input != "1110110" && input != "1110111" && input != "1111000" && input != "1111001" && input != "1111010" &&
		input != "0110000" && input != "0110001" && input != "0110010" && input != "0110011" && input != "0110100" && input != "0110101" && input != "0110110" && input != "0110111" && input != "0111000" && input != "0111001" && input != "0100001" && input != "0100010" && input != "0100011" && input != "0100100" && input != "0100101" && input != "0100110" && input != "0101000" && input != "0101001" && input != "0101010" && input != "0101100" && input != "0101101" && input != "0101110" && input != "0101111" && input != "0111010" && input != "0111011" && input != "0111100" && input != "0111101" && input != "0111110" && input != "0111111" &&
		input != "1000000" && input != "1011011" && input != "0100111" && input != "1011101" && input != "1011110" && input != "1011111" && input != "1100000" && input != "1111011" && input != "1111100" && input != "1111101" && input != "1111110" && input != "0100000" && input != "1011100" { return "Invalid BIN input"} else {
	for i := 0; i < len(chars); i = i + 8 {
		char = Data[chars[i:i+7]]
		output = append(output, string(char))

	}


	return strings.Join(output, "")
		}
}
